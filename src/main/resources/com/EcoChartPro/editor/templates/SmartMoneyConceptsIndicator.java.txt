// --- Create in Java Editor ---
package com.EcoChartPro.plugins.inapp;

import com.EcoChartPro.api.indicator.*;
import com.EcoChartPro.api.indicator.drawing.*;
import com.EcoChartPro.core.indicator.IndicatorContext;
import com.EcoChartPro.model.KLine;
import java.awt.Color;
import java.awt.Font;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public class SmartMoneyConceptsIndicator implements CustomIndicator {
    private record Pivot(int index, BigDecimal price, boolean isHigh) {}
    @Override public String getName() { return "Smart Money Concepts (Structure)"; }
    @Override public IndicatorType getType() { return IndicatorType.OVERLAY; }

    @Override
    public List<Parameter> getParameters() {
        return List.of(
            new Parameter("pivotStrength", ParameterType.INTEGER, 5),
            new Parameter("bullColor", ParameterType.COLOR, new Color(33, 150, 243)),
            new Parameter("bearColor", ParameterType.COLOR, new Color(255, 152, 0))
        );
    }

    @Override
    public List<DrawableObject> calculate(IndicatorContext context) {
        List<KLine> data = context.klineData();
        if (data.isEmpty()) return Collections.emptyList();

        int strength = (int) context.settings().get("pivotStrength");
        Color bullColor = (Color) context.settings().get("bullColor");
        Color bearColor = (Color) context.settings().get("bearColor");
        Font labelFont = new Font("SansSerif", Font.BOLD, 12);

        List<DrawableObject> drawables = new ArrayList<>();
        List<Pivot> pivots = findPivots(data, strength);
        Pivot lastHigh = null, lastLow = null;

        for (Pivot p : pivots) {
            if (p.isHigh()) {
                if (lastHigh != null && p.price().compareTo(lastHigh.price()) > 0) {
                    drawStructureLine(drawables, data, lastHigh, p, "BOS", bullColor, labelFont, true);
                }
                lastHigh = p;
            } else {
                if (lastLow != null && p.price().compareTo(lastLow.price()) < 0) {
                    drawStructureLine(drawables, data, lastLow, p, "BOS", bearColor, labelFont, false);
                }
                lastLow = p;
            }
        }
        return drawables;
    }

    private List<Pivot> findPivots(List<KLine> data, int strength) {
        List<Pivot> pivots = new ArrayList<>();
        for (int i = strength; i < data.size() - strength; i++) {
            boolean isPivotHigh = true, isPivotLow = true;
            KLine centerBar = data.get(i);
            for (int j = 1; j <= strength; j++) {
                if (data.get(i-j).high().compareTo(centerBar.high()) >= 0 || data.get(i+j).high().compareTo(centerBar.high()) > 0) isPivotHigh = false;
                if (data.get(i-j).low().compareTo(centerBar.low()) <= 0 || data.get(i+j).low().compareTo(centerBar.low()) < 0) isPivotLow = false;
            }
            if (isPivotHigh) pivots.add(new Pivot(i, centerBar.high(), true));
            if (isPivotLow) pivots.add(new Pivot(i, centerBar.low(), false));
        }
        return pivots;
    }

    private void drawStructureLine(List<DrawableObject> drawables, List<KLine> data, Pivot from, Pivot to, String label, Color color, Font font, boolean isBull) {
        KLine fromBar = data.get(from.index());
        KLine toBar = data.get(to.index());
        drawables.add(new DrawableLine(new DataPoint(fromBar.timestamp(), from.price()), new DataPoint(toBar.timestamp(), from.price()), color, 1.5f));
        BigDecimal priceOffset = from.price().subtract(to.price()).abs().multiply(new BigDecimal("0.1"));
        BigDecimal labelY = isBull ? from.price().add(priceOffset) : from.price().subtract(priceOffset);
        drawables.add(new DrawableText(new DataPoint(fromBar.timestamp(), labelY), label, font, color, TextAnchor.CENTER_LEFT));
    }
}